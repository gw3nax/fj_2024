name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - fj_2024_lesson_14
  pull_request:
    branches:
      - main
      - fj_2024_lesson_14
    paths:
      - .github/workflows/ci.yml

permissions:
  packages: write
  pull-requests: write

jobs:
  build:
    permissions:
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: fintech
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: kudagoAPI

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "PostgreSQL is up" && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Build with Gradle
        run: ./gradlew clean build --refresh-dependencies
        working-directory: kudagoAPI
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/fintech
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

  test:
    runs-on: ubuntu-latest
    services:
       postgres:
         image: postgres:latest
         env:
           POSTGRES_DB: fintech
           POSTGRES_USER: postgres
           POSTGRES_PASSWORD: postgres
         ports:
           - 5432:5432
         options: >-
           --health-cmd="pg_isready -U postgres"
           --health-interval=10s
           --health-timeout=5s
           --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: kudagoAPI

      - name: Run tests
        run: ./gradlew test
        working-directory: kudagoAPI
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/fintech
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

  static_analysis:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: kudagoAPI

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run static code analysis
        run: ./gradlew check
        working-directory: kudagoAPI
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/fintech
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

  docker:
    permissions:
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: static_analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: kudagoAPI

      - name: Build with Gradle
        run: ./gradlew clean build --refresh-dependencies
        working-directory: kudagoAPI

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/gw3nax/fintech:latest .
        working-directory: kudagoAPI

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/gw3nax/fintech:latest
        working-directory: kudagoAPI

  coverage_report:
    permissions:
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Coverage
        run: |
          chmod +x gradlew
          ./gradlew jacocoTestReport
        working-directory: kudagoAPI

      - name: Check if Jacoco report exists
        run: |
          ls -R build/reports/jacoco
        working-directory: kudagoAPI

      - name: Upload Jacoco Coverage Report
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 10
          min-coverage-changed-files: 10
          title: Code Coverage
          update-comment: true

      - name: Print full event payload for debugging
        run: echo "${{ toJson(github.event) }}"
        working-directory: kudagoAPI

      - name: Log event type
        run: echo  "${{ github.event_name }}"
        working-directory: kudagoAPI
