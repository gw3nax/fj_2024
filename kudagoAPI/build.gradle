plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'ru.gw3nax'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.springframework:spring-aspects:6.0.11'
    implementation project(':custom-starter')

    implementation 'io.projectreactor:reactor-core:3.6.11'

    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    testImplementation 'org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-13'

    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.test {
    finalizedBy(tasks.jacocoTestReport)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "ru/gw3nax/kudagoAPI/client/*",
                        "ru/gw3nax/kudagoAPI/configuration/*",
                        "ru/gw3nax/kudagoAPI/mapper/*",
                        "ru/gw3nax/kudagoAPI/repository/*"
                ])
            }))
        }
    }
}


tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "ru/gw3nax/kudagoAPI/client/*",
                    "ru/gw3nax/kudagoAPI/configuration/*",
                    "ru/gw3nax/kudagoAPI/mapper/*",
                    "ru/gw3nax/kudagoAPI/repository/*"
            ])
        }))
    }
}
